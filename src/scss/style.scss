@import "helper.scss";

$base-font-family: Verdana, Geneva, sans-serif;
$base-font-size: 20px;
$small-font-size: 16px;
$big-font-size: 60px;
$base-theme-color: #edc22e;
$background-color: #faf8ef;
$board-color: #baada0;
$text-color: #776e66;
$bright-text-color: #f9f6f2;
$border-radius: 5px;
$board-font-size: 55px;
$board-height: 464px;
$board-width: 476px;
$small-board-height: 320px;
$small-board-width: 320px;
$small-gameState-font-size: 45px;
$small-gameState-button-font-size: 18px;

$cell-color: #eee4da;
$cell-gold-color: #edc22e;
$cell-gold-glow-color: lighten($cell-gold-color, 15%);
$field-width: 500px;
$mobile-threshold: $field-width + 20px;

$game-over-background-color: white;
$game-over-text-color: #776e66;
$game-over-button-color: #776e66;
$game-over-button-text-color: #f9f6f2;
$game-win-background-color: lighten($cell-gold-color, 15%);
$game-win-text-color: white;
$game-win-button-color: #f9f6f2;
$game-win-button-text-color: #776e66;

$transition-speed: 100ms;

%grid-cell {
  display: flex;
  background-color: rgba($cell-color, 0.35);
  height: 80px;
  width: 80px;
  padding: 12px;
  justify-content: center;
  align-items: center;
  border-radius: $border-radius;
}

%gameState {
  height: $board-height;
  width: $board-width;
  font-size: $big-font-size;
  position: absolute;
  opacity: 0.9;
}

%gameStateButton {
  border: none;
  color: $text-color;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  margin: 4px 2px;
  font-size: $base-font-size;
  cursor: pointer;
  border-radius: 4px;
}

body {
  font-family: $base-font-family;
  background-color: $background-color;

  div:focus {
    outline: none;
  }
}

.header {
  display: flex;
  justify-content: flex-start;
  height: 50px;
  align-items: center;

  .bestScore {
    font-size: $small-font-size;
    color: $base-theme-color;
    padding: 5px;
  }

  img {
    height: 28px;
    width: 28px;
    padding: 5px;
    margin-left: 22px;
  }
}

.title {
  margin-top: -28px;
  text-align: center;
  color: $text-color;

  .p {
    font-size: $small-font-size;
  }
}

.score {
  color: $base-theme-color;
  font-size: $base-font-size;
  text-align: center;
}

.board {
  background-color: $board-color;
  text-align: center;
  height: $board-height;
  width: $board-width;
  margin: auto;
  border-radius: $border-radius;
  padding-top: 12px;
  padding-bottom: 12px;
  margin-top: 20px;
  color: $text-color;

  @include smaller($mobile-threshold) {
    height: $small-board-height;
    width: $small-board-width;

    .gridRow {
      .gridCell {
        height: 56px;
        width: 56px;
        padding: 6px;
      }
    }

    &.gameOver {
      .gameOver {
        height: $small-board-height;
        width: $small-board-width;
        font-size: $small-gameState-font-size;

        .restartButton {
          font-size: $small-gameState-button-font-size;
        }
      }
    }

    &.gameWin {
      .gameWin {
        height: $small-board-height;
        width: $small-board-width;
        font-size: $small-gameState-font-size;

        .keepGoingButton {
          font-size: $small-gameState-button-font-size;
        }
      }
    }
  }

  &.gameOver {
    background-color: $game-over-background-color;

    .gameOver {
      @extend %gameState;
      color: $game-over-text-color;
      background-color: $game-over-background-color;

      .restartButton {
        @extend %gameStateButton;
        color: $game-over-button-text-color;
        background-color: $game-over-button-color;
      }
    }
  }

  &.gameWin {
    background-color: $game-win-background-color;

    .gameWin {
      @extend %gameState;
      color: $game-win-text-color;
      background-color: $game-win-background-color;

      .keepGoingButton {
        @extend %gameStateButton;
        color: $game-win-button-text-color;
        background-color: $game-win-button-color;
      }
    }
  }

  .gridRow {
    display: flex;
    justify-content: space-evenly;
    padding: 6px;

    .gridCell {
      @extend %grid-cell;

      @include keyframes(appear) {
        0% {
          opacity: 0;
          @include transform(scale(0));
        }

        100% {
          opacity: 1;
          @include transform(scale(1));
        }
      }

      &.cell-new {
        @include animation(appear 200ms ease $transition-speed);
        @include animation-fill-mode(backwards);
      }

      @include keyframes(pop) {
        0% {
          @include transform(scale(0));
        }

        50% {
          @include transform(scale(1.2));
        }

        100% {
          @include transform(scale(1));
        }
      }

      &.cell-merged {
        @include animation(pop 200ms ease $transition-speed);
        @include animation-fill-mode(backwards);
      }
    }

    // Movement transition
    @include transition($transition-speed ease-in-out);
    -webkit-transition-property: -webkit-transform;
    -moz-transition-property: -moz-transform;
    transition-property: transform;

    // This section is forked from https://github.com/claudiopro/2048-react
    $base: 2;
    $exponent: 1;
    $limit: 11;

    // Colors for all 11 states, false = no special color
    // Colors for all 11 states, false = no special color
    $special-colors: false false,
      // 2
        false false,
      // 4
        #f78e48 true,
      // 8
        #fc5e2e true,
      // 16
        #ff3333 true,
      // 32
        #ff0000 true,
      // 64
        false true,
      // 128
        false true,
      // 256
        false true,
      // 512
        false true,
      // 1024
        false true; // 2048

    // Build cell colors until 2048 cell
    @while $exponent <= $limit {
      $power: pow($base, $exponent);

      .cell-#{$power} {
        // Calculate base background color
        $gold-percent: ($exponent - 1) / ($limit - 1) * 100;
        // mix(color 1, color2, weight of color1)
        $mixed-background: mix($cell-gold-color, $cell-color, $gold-percent);

        // Gets the nth item in a list. The first item in a Sass list is number 1. nth(10px 20px 30px, 1) => 10px
        // Get pairs from $special-colors, the first item is background color, the second item is text color
        $nth-color: nth($special-colors, $exponent);
        $special-background: nth($nth-color, 1);
        $bright-color: nth($nth-color, 2);

        @if $special-background {
          $mixed-background: mix($special-background, $mixed-background, 55%);
        }

        @if $bright-color {
          color: $bright-text-color;
        }

        // Set background
        background: $mixed-background;

        // Add glow
        $glow-opacity: max($exponent - 4, 0) / ($limit - 4);

        @if not $special-background {
          box-shadow: 0
              0
              30px
              10px
              rgba($cell-gold-glow-color, $glow-opacity / 1.8),
            inset 0 0 0 1px rgba(white, $glow-opacity / 3);
        }

        // Define font size and media font size
        @if $power > 0 and $power < 100 {
          font-size: 55px;

          @include smaller($mobile-threshold) {
            font-size: 35px;
          }
        } @else if $power >= 100 and $power < 1000 {
          font-size: 45px;

          @include smaller($mobile-threshold) {
            font-size: 25px;
          }
        } @else if $power >= 1000 {
          font-size: 35px;

          @include smaller($mobile-threshold) {
            font-size: 15px;
          }
        }
      }

      $exponent: $exponent + 1;
    }
  }
}
